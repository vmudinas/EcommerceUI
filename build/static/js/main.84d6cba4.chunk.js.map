{"version":3,"sources":["services/productService.ts","contexts/AdminContext.tsx","pages/Products.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ProductService","axios","defaults","baseURL","pageNumber","pageSize","f","a","url","headers","params","response","paginationValues","JSON","parse","pagination","console","log","data","initialState","productPagination","changeProductPageNumber","changeProductPageSize","AdminContext","createContext","useStyles","makeStyles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","width","headCells","id","alignment","label","Products","useState","totalItems","setTotalItems","products","setProducts","useContext","React","selectedDate","setSelectedDate","classes","pageChange","setPageChange","pageSizeChange","setPageSizeChange","dateChange","setDateChange","fetchData","productService","GetProducts","useEffect","Divider","Grid","item","xs","Paper","Toolbar","Typography","variant","TextField","type","defaultValue","Date","toISOString","split","onChange","event","target","value","toString","className","InputLabelProps","shrink","TableContainer","Table","size","TableHead","TableRow","map","headCell","TableCell","align","length","productId","productName","inventoryQuantity","expectedShipDate","TablePagination","count","onChangePage","newPage","page","rowsPerPage","rowsPerPageOptions","component","onChangeRowsPerPage","parseInt","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84d6cba4.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { PaginationResponse, PaginationValues } from \"../types/pagination\";\r\nimport { ProductListItem } from \"../types/product\";\r\n\r\nclass ProductService {\r\n  constructor() {\r\n     axios.defaults.baseURL = \"http://localhost:3005/api\"; // This should be moved to env.\r\n  }\r\n\r\n  async GetProducts(\r\n    pageNumber: number,\r\n    pageSize: number,\r\n    f: string,\r\n  ): Promise<PaginationResponse<ProductListItem[]>> {\r\n    const response = await axios({\r\n      url: \"/inventory\",\r\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n      params: {\r\n        f,\r\n        pageNumber,\r\n        pageSize,\r\n      },\r\n    });\r\n    const paginationValues: PaginationValues = JSON.parse(\r\n      response.headers.pagination\r\n    );\r\n    console.log(\"asd\");\r\n    console.log(response.data);\r\n    return {\r\n      data: response.data,\r\n      pagination: paginationValues,\r\n    };\r\n  }\r\n}\r\n\r\nexport default ProductService;\r\n","import { createContext, FC, useReducer } from \"react\";\r\nimport { ActionTypes } from \"./actions\";\r\n\r\nexport type AdminState = {\r\n  productPagination: {\r\n    pageNumber: number;\r\n    pageSize: number;\r\n  };\r\n\r\n  changeProductPageNumber: (pageNumber: number) => void;\r\n  changeProductPageSize: (pageSize: number) => void;\r\n};\r\n\r\nconst initialState: AdminState = {\r\n  productPagination: {\r\n    pageNumber: 1,\r\n    pageSize: 10,\r\n  },\r\n\r\n  changeProductPageNumber: () => {},\r\n  changeProductPageSize: () => {},\r\n};\r\n\r\nfunction reducer(state: AdminState, action: ActionTypes): AdminState {\r\n  const newState = { ...state };\r\n  switch (action.type) {\r\n    case \"CHANGE_PRODUCT_PAGE_NUMBER\":\r\n      newState.productPagination.pageNumber = action.pageNumber;\r\n      return newState;\r\n    case \"CHANGE_PRODUCT_PAGE_SIZE\":\r\n      newState.productPagination.pageSize = action.pageSize;\r\n      return newState;\r\n    default:\r\n      return newState;\r\n  }\r\n}\r\n\r\nexport const AdminContext = createContext<AdminState>(initialState);\r\n\r\nexport const AdminStateProvider: FC = (props) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const changeProductPageNumber = (pageNumber: number) =>\r\n    dispatch({ type: \"CHANGE_PRODUCT_PAGE_NUMBER\", pageNumber });\r\n  const changeProductPageSize = (pageSize: number) =>\r\n    dispatch({ type: \"CHANGE_PRODUCT_PAGE_SIZE\", pageSize });\r\n  const value = {\r\n    ...state,\r\n    changeProductPageNumber,\r\n    changeProductPageSize,\r\n  };\r\n  return (\r\n    <AdminContext.Provider value={value}>\r\n      {props.children}\r\n    </AdminContext.Provider>\r\n  );\r\n};\r\n","import React, { FC, useContext, useEffect, useState } from \"react\";\r\nimport ProductService from \"../services/productService\";\r\nimport { ProductListItem } from \"../types/product\";\r\nimport {\r\n  Divider,\r\n  Grid,\r\n  Paper,\r\n  Table,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Toolbar,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../contexts/AdminContext\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 200,\r\n  },\r\n}));\r\n\r\ntype HeadCell = {\r\n  id: string;\r\n  alignment: \"left\" | \"center\" | \"right\" | \"justify\" | \"inherit\" | undefined;\r\n  label: string;\r\n  disablePadding?: boolean;\r\n};\r\nconst headCells: Array<HeadCell> = [\r\n  { id: \"productId\", alignment: \"left\", label: \"Product ID\" },\r\n  { id: \"productName\", alignment: \"left\", label: \"Product Name\" },\r\n  { id: \"inventoryQuantity\", alignment: \"left\", label: \"Inventory Quantitty\" },\r\n  { id: \"expectedShipDate\", alignment: \"left\", label: \"Expectect Ship Date\" },\r\n];\r\n\r\nconst Products: FC = () => {\r\n  const [totalItems, setTotalItems] = useState(1);\r\n  const [products, setProducts] = useState<ProductListItem[]>();\r\n\r\n  const { productPagination, changeProductPageSize, changeProductPageNumber } =\r\n    useContext(AdminContext);\r\n  const { pageNumber, pageSize } = productPagination;\r\n\r\n  const [selectedDate, setSelectedDate] = React.useState(\"\");\r\n  const classes = useStyles();\r\n  const [pageChange, setPageChange] = useState(false);\r\n  const [pageSizeChange, setPageSizeChange] = useState(false);\r\n  const [dateChange, setDateChange] = useState(false);\r\n\r\n  function fetchData() {\r\n    (async () => {\r\n      const productService = new ProductService();\r\n      const response = await productService.GetProducts(\r\n        pageNumber,\r\n        pageSize,\r\n        selectedDate\r\n      );\r\n\r\n      setProducts(response.data);\r\n      setTotalItems(response.pagination.totalItems);\r\n    })();\r\n  }\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [pageNumber, productPagination.pageSize, setProducts, setTotalItems]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    setPageChange(false);\r\n  }, [pageChange]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    setPageSizeChange(false);\r\n  }, [pageSizeChange]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    setDateChange(false);\r\n  }, [dateChange]);\r\n\r\n  const handleChangePageNumber = (\r\n    event: React.MouseEvent<HTMLButtonElement> | null,\r\n    newPage: number\r\n  ) => {\r\n    productPagination.pageNumber = newPage + 1;\r\n    changeProductPageNumber(newPage + 1);\r\n    setPageChange(true);\r\n  };\r\n\r\n  const handleChangePageSize = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    productPagination.pageSize = parseInt(event.target.value);\r\n    changeProductPageSize(parseInt(event.target.value));\r\n    changeProductPageNumber(pageNumber);\r\n    setPageSizeChange(true);\r\n  };\r\n\r\n  const handleDateChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    console.log(\"handleDateChange\");\r\n    console.log(event.target.value);\r\n    setSelectedDate(event.target.value.toString());\r\n    setDateChange(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Divider />\r\n      <br />\r\n      <Grid container spacing={1}>\r\n        <Grid container item xs={3} spacing={3}></Grid>\r\n        <Grid item xs={6}>\r\n          <Divider />\r\n\r\n          <Grid container spacing={6}>\r\n            <Grid item xs={12}>\r\n              <div>\r\n                <Paper>\r\n                  <Toolbar>\r\n                  <Grid container spacing={6}>\r\n                  <Grid item xs={8}>\r\n                    <Typography variant=\"h6\" id=\"tableTitle\">\r\n                      Products\r\n                    </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                    <Typography variant=\"h6\" id=\"tableTitle\">\r\n                      <TextField\r\n                        id=\"date\"\r\n                        label=\"Order Date\"\r\n                        type=\"date\"\r\n                        defaultValue={new Date().toISOString().split(\"T\")[0]}\r\n                        onChange={handleDateChange}\r\n                        className={classes.textField}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    </Typography>\r\n                    </Grid>\r\n                    </Grid>\r\n                  </Toolbar>\r\n                  <TableContainer>\r\n                    <Table size={\"medium\"}>\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          {headCells.map((headCell: HeadCell) => (\r\n                            <TableCell\r\n                              key={headCell.id}\r\n                              align={headCell.alignment}\r\n                            >\r\n                              {headCell.label}\r\n                            </TableCell>\r\n                          ))}\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableHead>\r\n                        {products &&\r\n                          products.length &&\r\n                          products.map((item: ProductListItem) => (\r\n                            <TableRow>\r\n                              <TableCell key={item.productId}>\r\n                                {item.productId}\r\n                              </TableCell>\r\n                              <TableCell key={item.productId + \"Name\"}>\r\n                                {item.productName}\r\n                              </TableCell>\r\n                              <TableCell\r\n                                key={item.productId + \"InventoryQuantity\"}\r\n                              >\r\n                                {item.inventoryQuantity}\r\n                              </TableCell>\r\n                              <TableCell\r\n                                key={item.productId + \"ExpectedShipDate\"}\r\n                              >\r\n                                {item.expectedShipDate}\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          ))}\r\n                      </TableHead>\r\n                    </Table>\r\n                  </TableContainer>\r\n                  {products && products.length && (\r\n                    <TablePagination\r\n                      count={totalItems || 1}\r\n                      onChangePage={handleChangePageNumber}\r\n                      page={pageNumber ? pageNumber - 1 : 0}\r\n                      rowsPerPage={pageSize}\r\n                      rowsPerPageOptions={[1, 5, 10, 25]}\r\n                      component=\"div\"\r\n                      onChangeRowsPerPage={handleChangePageSize}\r\n                    />\r\n                  )}\r\n                </Paper>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Products;\r\n","import \"./App.css\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Product from \"../src/pages/Products\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/\">\n              <Product />\n            </Route>\n          </Switch>\n        </BrowserRouter>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}